{"version":3,"sources":["components/Header/Header.js","store/index.js","containers/Content/Content.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","Container","id","Row","Col","md","Navbar","Brand","Nav","className","Item","loggedIn","Button","onClick","switch","variant","recipeSlice","createSlice","name","initialState","recipes","reducers","add","state","action","newRecipe","payload","fav","push","delete","console","log","filter","el","naziv","update","store","configureStore","reducer","actions","EditRecipe","react","lazy","NewRecipe","DeleteRecipe","Content","dispatch","useDispatch","useSelector","useState","show","recipe","ShowDeleteModal","setShowDeleteModal","NewRecipeModal","setNewRecipeModal","RecipeEditing","setRecipeEditing","emptyFieldsHandler","sastojci","field","favoriteToggler","index","isFav","newArr","copy","Object","assign","LoggedInContent","Tabs","Tab","eventKey","title","Accordion","defaultActiveKey","map","recept","Card","style","marginBottom","Toggle","as","Collapse","Body","fluid","length","sastojak","i","NotLoggedIn","fallback","close","del","toggleShow","noviRecept","saveRecipe","App","LoggedIn","setLoggedIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc799034.chunk.js","sourcesContent":["import react from \"react\";\r\n\r\nimport {\r\n    AiOutlineUser\r\n} from \"react-icons/ai\";\r\nimport {\r\n    Container,\r\n    Navbar,\r\n    Nav,\r\n    Row,\r\n    Col,\r\n    Button\r\n} from \"react-bootstrap\";\r\n\r\nimport \"./Header.css\";\r\n\r\nexport default function Header(props){\r\n    return (\r\n        <Container id=\"HeaderBox\">\r\n            <Row>\r\n                <Col md={2}>\r\n                    <Navbar>\r\n                        <Navbar.Brand id=\"Title\">RECEPTNIK</Navbar.Brand>\r\n                    </Navbar>\r\n                </Col>\r\n                <Col md={10}>\r\n                    <Nav id=\"UserBoard\" className=\"\">\r\n                        <Nav.Item>\r\n                            <AiOutlineUser />\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <p>{props.loggedIn ? \"KorisnickoIme1234\" : null}</p>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Button onClick={() => props.switch(!props.loggedIn)} variant=\"dark\">\r\n                                {props.loggedIn ? \"ODJAVA\" : \"PRIJAVA\"}\r\n                            </Button>\r\n                        </Nav.Item>\r\n                                     \r\n                    </Nav>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    recipes: []\r\n}\r\n\r\nconst recipeSlice = createSlice({\r\n    name: \"recipes\",\r\n    initialState,\r\n    reducers: {\r\n        add(state, action) {\r\n            const newRecipe = action.payload;\r\n            newRecipe.fav = false;\r\n            state.recipes.push(newRecipe);\r\n        },\r\n        delete(state, action) {\r\n            console.log(action.payload)\r\n            state.recipes = state.recipes.filter(el => el.naziv !== action.payload)\r\n        },\r\n        update(state, action) {\r\n            state.recipes = action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: recipeSlice.reducer\r\n});\r\n\r\nexport const actions = recipeSlice.actions;\r\n\r\nexport default store;","import react, { useState, Suspense } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actions } from \"../../store/index\";\r\nimport \"./Content.css\";\r\n\r\nimport { \r\n    BiTrash,\r\n    BiEdit,\r\n    BiPlus,\r\n} from \"react-icons/bi\";\r\nimport {\r\n    AiOutlineHeart,\r\n    AiFillHeart\r\n} from \"react-icons/ai\";\r\n\r\nimport {\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Accordion,\r\n    Card,\r\n    Tabs,\r\n    Tab\r\n} from \"react-bootstrap\";\r\n\r\nconst EditRecipe = react.lazy(() => import(\"../EditRecipe\"));\r\nconst NewRecipe = react.lazy(() => import(\"../NewRecipe\"));\r\nconst DeleteRecipe = react.lazy(() => import(\"../../components/DeleteRecipe\"));\r\n\r\nexport default function Content(props){\r\n    const dispatch = useDispatch()\r\n    const recipes = useSelector(state => state.recipes)\r\n\r\n    const [ShowDeleteModal, setShowDeleteModal] = useState({\r\n        show: false,\r\n        recipe: \"\"\r\n    });\r\n    const [NewRecipeModal, setNewRecipeModal] = useState({show: false});\r\n    const [RecipeEditing, setRecipeEditing] = useState({\r\n        show: false,\r\n        recipe: null,\r\n        id: null,\r\n    })\r\n\r\n    //Ako korisnik spremi prazna ili nedovrsena polja (sastojak ili kolicina prazni),\r\n    //to polje se brise\r\n    const emptyFieldsHandler = recipe => {\r\n        recipe.sastojci = [...recipe.sastojci].filter(field => field[0] !== \"\" && field[1] !== \"\")\r\n        return recipe\r\n    }\r\n\r\n    const addNewRecipe = noviRecept => {\r\n        dispatch(actions.add(emptyFieldsHandler(noviRecept)))\r\n    }\r\n\r\n    const recipeDeleter = naziv => {\r\n        dispatch(actions.delete(naziv))\r\n    }\r\n\r\n    const recipeUpdater = newRecipe => {\r\n        const copy = [...recipes]\r\n        copy[RecipeEditing.id] = emptyFieldsHandler(newRecipe)\r\n        dispatch(actions.update([...copy]));\r\n    }\r\n\r\n    const favoriteToggler = (index, isFav) => {\r\n        const newArr = [...recipes]\r\n        const copy = Object.assign([], newArr[index])\r\n        copy.fav = isFav\r\n        newArr[index] = copy\r\n        dispatch(actions.update([...newArr]));\r\n    }\r\n\r\n    const LoggedInContent = (\r\n        <Tabs>\r\n                <Tab eventKey=\"all\" title=\"Svi Recepti\" >\r\n                    <Container className=\"RecipesBox\">\r\n                        <h1>Uneseni Recepti</h1>\r\n                        <div id=\"AddNewRecipe\" onClick={() => setNewRecipeModal({show: true})}>\r\n                            <BiPlus/>\r\n                            Dodaj Novi Recept\r\n                        </div>\r\n\r\n                        <Accordion defaultActiveKey=\"0\">\r\n                            {\r\n                                recipes.map((recept, index) => {\r\n                                    return (\r\n                                        <Card key={index} style={{marginBottom: \"5px\"}}>\r\n                                            \r\n                                            <Accordion.Toggle as={Card.Header} eventKey={index+1} className=\"RecipeName\">\r\n                                                {recept.naziv}\r\n                                            </Accordion.Toggle>\r\n\r\n                                            <Accordion.Collapse eventKey={index+1}>\r\n                                                <Card.Body>\r\n                                                    <Container fluid>\r\n                                                        <Row>\r\n                                                            <Col md={8}>\r\n                                                                {\r\n                                                                    recept.sastojci.length !== 0 ?\r\n                                                                    recept.sastojci.map((sastojak, i) => {\r\n                                                                        return (\r\n                                                                            <p key={i}>\r\n                                                                                {sastojak[0]+\" -> \"+sastojak[1]}\r\n                                                                            </p>\r\n                                                                        )\r\n                                                                    }): null\r\n                                                                    //console.log(recept.sastojci)\r\n                                                                }\r\n                                                            </Col>\r\n\r\n                                                            <Col md={4} id=\"Ikonice\">\r\n                                                                    <BiTrash onClick={() => setShowDeleteModal({\r\n                                                                        show: true,\r\n                                                                        recipe: recept.naziv\r\n                                                                    })}/>\r\n                                                                    <BiEdit onClick={() =>  setRecipeEditing({show: true, recipe: recept, id: index})}/>\r\n                                                                    {recept[\"fav\"] ? \r\n                                                                    <AiFillHeart onClick={() => favoriteToggler(index, false)} className=\"Heart\"/> : \r\n                                                                    <AiOutlineHeart onClick={() => favoriteToggler(index, true)} className=\"Heart\"/>}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Container>\r\n                                                    \r\n                                                        \r\n                                                </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Accordion>\r\n                    </Container>\r\n\r\n                </Tab>\r\n                <Tab eventKey=\"favorites\" title=\"Favoriti\">\r\n                    <Container className=\"RecipesBox\">\r\n                        <h1>Favoriti</h1>\r\n                        <Accordion defaultActiveKey=\"0\">\r\n                            {\r\n                                recipes.map((recept, index) => {\r\n                                    return recept[\"fav\"] ? (\r\n                                        <Card key={index}>\r\n                                            <Accordion.Toggle as={Card.Header} eventKey={index+1} className=\"RecipeName\">\r\n                                                {recept.naziv}\r\n                                            </Accordion.Toggle>\r\n                                            <Accordion.Collapse eventKey={index+1}>\r\n                                                <Card.Body>\r\n                                                    <Container fluid>\r\n                                                        <Row>\r\n                                                            <Col md={7}>\r\n                                                                {\r\n                                                                    recept.sastojci.length !== 0 ?\r\n                                                                    recept.sastojci.map((sastojak, i) => {\r\n                                                                        return (\r\n                                                                            <p key={i}>\r\n                                                                                {sastojak[0]+\" -> \"+sastojak[1]}\r\n                                                                            </p>\r\n                                                                        )\r\n                                                                    }): null\r\n                                                                    //console.log(recept.sastojci)\r\n                                                                }\r\n                                                            </Col>\r\n\r\n                                                            <Col md={5} id=\"Ikonice\">\r\n                                                                    <BiTrash onClick={() => setShowDeleteModal({\r\n                                                                        show: true,\r\n                                                                        recipe: recept.naziv\r\n                                                                    })}/>\r\n                                                                    <BiEdit onClick={() =>  setRecipeEditing({show: true, recipe: recept, id: index})}/>\r\n                                                                    {recept[\"fav\"] ? \r\n                                                                    <AiFillHeart onClick={() => favoriteToggler(index, false)} className=\"Heart\"/> : \r\n                                                                    <AiOutlineHeart onClick={() => favoriteToggler(index, true)} className=\"Heart\"/>}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Container>  \r\n                                                </Card.Body>\r\n                                            </Accordion.Collapse>\r\n                                        </Card>\r\n                                    ) : null\r\n                                })\r\n                            }\r\n                        </Accordion>\r\n\r\n                    </Container>\r\n                </Tab>\r\n        </Tabs>\r\n    )\r\n\r\n    const NotLoggedIn = (\r\n        <Container id=\"NotLoggedIn\">\r\n            <h3>Molimo prijavite se u aplikaciju kako biste ju koristili</h3>\r\n        </Container>\r\n    )\r\n\r\n    return (\r\n        <Container id=\"ContentBox\">\r\n            \r\n            {props.loggedIn ? LoggedInContent : NotLoggedIn}\r\n            \r\n            {/*Modal za brisanje recepta*/}\r\n            {ShowDeleteModal.show ? \r\n            <Suspense fallback={<div></div>}>\r\n                <DeleteRecipe \r\n                    naziv = {ShowDeleteModal.recipe}\r\n                    show = {ShowDeleteModal.show}\r\n                    close = {setShowDeleteModal}\r\n                    state = {recipes}\r\n                    del = {recipeDeleter}\r\n                />  \r\n            </Suspense>\r\n            : null}\r\n\r\n            {/*Modal za dodavanje novog recepta*/}\r\n            <Suspense fallback={<div></div>}>\r\n                <NewRecipe \r\n                    show={NewRecipeModal.show}\r\n                    toggleShow={setNewRecipeModal}\r\n                    add={addNewRecipe}/>\r\n            </Suspense>\r\n            \r\n            {/*Modal za azuriranje recepta*/}\r\n            {\r\n                RecipeEditing.show ?\r\n                <Suspense fallback={<div></div>}>\r\n                    <EditRecipe\r\n                        show={RecipeEditing.show}\r\n                        recipe={RecipeEditing.recipe}\r\n                        toggleShow={(show) => {\r\n                            setRecipeEditing({\r\n                                ...RecipeEditing,\r\n                                show: show,\r\n                            })\r\n                        }}\r\n                        saveRecipe={recipeUpdater}\r\n                    />\r\n                </Suspense> : null\r\n            }\r\n            \r\n        </Container>\r\n    )\r\n}","import react, { useState } from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Content from \"./containers/Content/Content\";\nimport './App.css';\nimport {\n  Container\n} from \"react-bootstrap\";\n\nfunction App() {\n  const [LoggedIn, setLoggedIn] = useState(true)\n  return (\n    <div>\n      <Container fluid className=\"HeaderBox\">\n        <Header loggedIn={LoggedIn} switch={setLoggedIn}/>\n      </Container>\n      <Content loggedIn={LoggedIn}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}